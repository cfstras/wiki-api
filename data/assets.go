// Code generated by go-bindata.
// sources:
// assets.go
// data.go
// indexOf.mustache
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func assetsGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsGo,
		"assets.go",
	)
}

func assetsGo() (*asset, error) {
	bytes, err := assetsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1476909578, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\x49\x2c\x49\xe4\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x03\xc9\x28\xe8\x16\x64\xa7\x2b\xa8\xb8\xfb\x07\x38\x3a\x7b\x3b\xba\xbb\x2a\xe8\xe6\x2b\x24\x16\x17\xa7\x96\x14\xeb\xa5\xe7\x2b\xe8\x71\x01\x02\x00\x00\xff\xff\x54\x60\x2c\x9e\x46\x00\x00\x00")

func dataGoBytes() ([]byte, error) {
	return bindataRead(
		_dataGo,
		"data.go",
	)
}

func dataGo() (*asset, error) {
	bytes, err := dataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data.go", size: 70, mode: os.FileMode(420), modTime: time.Unix(1473403985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexofMustache = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x50\x3d\x6b\xf3\x30\x10\x9e\xa5\x5f\xa1\xd7\x59\xde\x0e\x89\x92\x42\x17\xf7\xa2\x29\x04\xb2\x94\x0e\x9d\x0b\x8a\x25\x47\xa6\xb2\x64\xac\x2b\xd4\x1c\xfe\xef\xc5\x8e\x9d\xa4\x25\x74\xbb\xd3\x3d\x5f\x7a\xe0\x9f\x89\x05\x76\x8d\x15\x0e\x6b\xaf\x38\x38\xab\x8d\xe2\x0c\xb0\x42\x6f\xd5\x21\x18\xfb\x25\x62\x29\x88\x5e\x35\xba\xbe\x07\x79\x3e\x70\x06\x09\xbb\x71\x60\xab\xb2\xf2\x36\x09\x34\x82\x38\x63\xac\xd1\xc6\x54\xe1\x94\x8b\xb5\xad\xc5\x7a\xf5\x64\xeb\x67\xce\x58\x7f\x03\x3c\x46\xd3\x9d\xb1\x65\x0c\xb8\x2c\x75\x5d\xf9\x2e\x17\x75\x0c\x31\x35\xba\xb0\xbf\xf1\x43\xa6\x8b\xfc\x51\x17\x1f\xa7\x36\x7e\x06\xb3\x2c\xa2\x8f\x6d\x2e\x16\xc6\x98\xbb\x16\xd8\xe6\x01\xdd\xb2\x70\x95\x37\xff\x1f\xc3\xc3\x5f\x1a\xd6\xce\xb6\x20\xa7\x9f\x81\x3c\x97\x01\x6e\x73\xaf\x08\xb7\x51\x1c\x50\x1f\xbd\x15\x85\xd7\x29\x6d\xb3\xd1\x3b\x1b\xdb\x9b\x6a\x64\x80\x46\xbd\x75\x8d\x05\x89\x97\xfd\x45\xd7\x3f\xf6\xe4\xf4\xb4\x82\x9c\x89\x44\x8b\xfd\xa0\xd6\x0f\x81\xb0\x9d\xa1\x44\x8b\x43\xda\x55\x6d\xdf\xef\x88\xe4\x34\x12\xbd\x4f\xd3\xfe\xfa\x78\x6b\x00\x5a\xb8\xd6\x96\xdb\x8c\x68\xf0\x1e\x18\xb3\x8c\xbc\x32\x32\x35\x9f\x41\x6a\x75\xcb\x27\x3a\xec\x2e\x8a\x20\xc7\x38\x44\x72\x0e\x08\x72\x6c\x41\xf1\xef\x00\x00\x00\xff\xff\x9c\x47\xfe\x1e\x4d\x02\x00\x00")

func indexofMustacheBytes() ([]byte, error) {
	return bindataRead(
		_indexofMustache,
		"indexOf.mustache",
	)
}

func indexofMustache() (*asset, error) {
	bytes, err := indexofMustacheBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "indexOf.mustache", size: 589, mode: os.FileMode(420), modTime: time.Unix(1476909568, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets.go": assetsGo,
	"data.go": dataGo,
	"indexOf.mustache": indexofMustache,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets.go": &bintree{assetsGo, map[string]*bintree{}},
	"data.go": &bintree{dataGo, map[string]*bintree{}},
	"indexOf.mustache": &bintree{indexofMustache, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

